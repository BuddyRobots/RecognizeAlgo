1、卡片识别
白板上放置卡片，每种元件有不同的背景颜色，要求判断元件摆放的方向。

仿射变换，wrapPerspective();
去噪，
threshold，消去白色背景，
开运算去掉黑线，
边缘检测找出所有卡片的contour，
检测contour内圈附近的颜色（adaptive 阈值设置方法），用于确定元件类型，避免元件色彩的干扰，
Machine Learning确定元件方向分类，（对各个contour内与该元件模板进行角点匹配确定元件方向，）
检测出的卡片可以被抹去，以方便对线的检测。

问题：处理光照变化。

2、手写曲线检测
手写曲线 -> 一定间隔分离的点（间隔参数可调） -> 可用于重构曲线

将原图的白色背景和所有卡片减除，留下曲线，
二值化，
开闭运算，平滑曲线，
skeletonization将粗线条转化成线，
在线上找一个点，做圆找交点，迭代，找到用于重构曲线的点。

3、判断电路连通关系

4、windows系统U3D的OpenCV



-------------------------------------------------------------------

颜色识别的问题是颜色识别属于不太稳定的检测方法，因为不同光照，不同角度，不同色温下颜色数值范围有变动。
在APP发布之后，不太可能让用户在运行APP时进行校准，
所以为了程序的鲁棒性，阈值需要留出比较大容错空间，但也有可能造成检测不稳定，所以需要更多的测试。
也需要在产品做成之后不断修改。
也许我们的APP使用环境限制在室内，小空间，桌面等地方，颜色偏差不会很大，也许是我多虑了。
我有这个担心的主要原因是当时做机器人足球赛，环境从室内实验室移到了体育馆，颜色完全飘了。

Deep Learning 训练
需要大量训练集
各个目标（元件），在图像中的不同位置，不同的旋转角度。
直接完成卡片识别。
可以先用其他方法做出样品，然后收集数据训练。最后改成Deep Learning方法。

--------------------------------------------------------------------

卡片做成沙面的，不要反光！！

匹配模板的大小根据实际情况变化以达到最佳特征点检测。
